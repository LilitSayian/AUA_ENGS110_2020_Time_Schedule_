class Deque:
    def __init__(self, size):
        self.size = size
        # self.next = next
        self.rear = -1
        self.front = -1
        # self.deque = -1
        # for i in range(size):
        #     self.deque.append(None)
        self.CyclicArray = [None for i in range(size)]
        # self._first = None
        # #         self._last = None
        # #         self._size = 0

    def AddFirst(self, obj):

        if ((self.rear + 1) % self.size == self.front):
            for i in range(self.size):
                self.CyclicArray.append(None)
            self.size = self.size * 2
            self.front = (self.front - 1) % self.size
            self.CyclicArray[self.front] = data

        elif (self.front == -1):
            self.front = 0
            self.rear = 0
            self.CyclicArray[self.front] = obj
        else:
            self.front = (self.front - 1) % self.size
            self.CyclicArray[self.front] = obj

    def AddLast(self, obj):

        if ((self.rear + 1) % self.size == self.front):
            for i in range(self.size):
                self.CyclicArray.append(None)
            self.size = self.size * 2
            self.rear = (self.rear + 1) % self.size
            self.CyclicArray[self.rear] = obj

        elif (self.front == -1):
            self.front = 0
            self.rear = 0
            self.CyclicArray[self.rear] = obj
        else:

            self.rear = (self.rear + 1) % self.size
            self.CyclicArray[self.rear] = obj

    def removeFirst(self):
        if (self.front == -1):
            # return
            print("Empty\n")

        elif (self.front == self.rear):
            temp = self.CyclicArray[self.front]
            self.front = -1
            self.rear = -1
            return temp
        else:
            temp = self.CyclicArray[self.front]
            self.front = (self.front + 1) % self.size
            return temp

    def removeLast(self):
        if (self.front == -1):
            print("Empty\n")

        elif (self.front == self.rear):
            temp = self.CyclicArray[self.front]
            self.front = -1
            self.rear = -1
            return temp
        else:
            temp = self.CyclicArray[self.rear]
            self.rear = (self.rear - 1) % self.size
            return temp

    def first(self):
        print(self.CyclicArray[self.front])

    def last(self):
        print(self.CyclicArray[self.rear])

    def display(self):
        if(self.front == -1):
            # return
            print("Empty")

        elif (self.rear >= self.front):
            print("Cyclic array contains:", end=" ")
            for i in range(self.front, self.rear + 1):
                print(self.CyclicArray[i], end=" ")
            print()

        else:
            print("Cyclic array contains:", end=" ")
            for i in range(self.front, self.size):
                print(self.CyclicArray[i], end=" ")
            for i in range(0, self.rear + 1):
                print(self.CyclicArray[i], end=" ")
            print()

        if ((self.rear + 1) % self.size == self.front):
            print("It's Full")


class Node:
    def __init__(self, obj):
        self.data = obj
        self.next = None
        self.prev = None


class LinkedList():
    def __init__(self):
        self.headval = None

    def linkedListPrint(self):
        printval = self.headval
        while printval is not None:
            print(printval.data)
            printval = printval.next
        print('\n')

    def AddFirst(self, newobj):
        New_Node = Node(newobj)
        New_Node.next = self.headval
        self.headval = New_Node

    def AddLast(self, newobj):
        New_Node = Node(newobj)
        if self.headval is None:
            self.headval = New_Node
            return

        laste = self.headval
        while (laste.next):
            laste = laste.next
        laste.next = New_Node

    def removeFirst(self):
        HeadVal = self.headval
        if (HeadVal is not None):
            self.headval = HeadVal.next
            HeadVal = None
            return

        while (HeadVal is not None):
            HeadVal = HeadVal.next

        if (HeadVal == None):
            return
        HeadVal = None

    def removeLast(self):
        if self.headval == None:
            return None
        if self.headval.next == None:
            self.headval = None
            return None
        second_last = self.headval
        while (second_last.next.next):
            second_last = second_last.next
        second_last.next = None
        return self.headval

    def first(self):
        print(f"First Node is: {self.headval.data}")

    def last(self):
        while self.headval.next is not None:
            self.headval = self.headval.next
        print(f"Last Node is: {self.headval.data}")

def main():

    cyclicArray = Deque(6)
    cyclicArray.AddFirst("1")
    cyclicArray.AddFirst("2")
    cyclicArray.AddFirst("3")
    cyclicArray.AddLast("4")
    cyclicArray.AddLast("5")
    cyclicArray.first()
    cyclicArray.last()
    cyclicArray.display()

    List_one = LinkedList()
    List_one.AddFirst("LL 1")
    List_one.AddFirst("LL 2")
    List_one.AddFirst("LL 3")
    List_one.AddFirst("LL 4")
    List_one.AddFirst("LL 5")
    List_one.linkedListPrint()
    List_one.removeFirst()
    List_one.linkedListPrint()
    List_one.removeLast()
    List_one.linkedListPrint()
    List_one.first()
    List_one.last()


main()
